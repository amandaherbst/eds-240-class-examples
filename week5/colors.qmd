---
title: "Lecture 5"
editor: 
  markdown: 
    wrap: 72
---

base plots

```{r}
library(palmerpenguins)
library(tidyverse)

# categorical var ----
cat_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
  geom_point(size = 4, alpha = 0.8)

cat_color_plot 

# continuous variable ----
cont_color_plot <- ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g)) +
  geom_point(size = 4, alpha = 0.8) 

cont_color_plot 
```

## Ensuring inclusive and accessible design through color choices

### The problem with rainbow color maps

-   don't follow any natural perceived ordering (no innate sense of
    higher or lower, bands of dark and light in grayscale)
-   perceptual changes in rainbow colors are not uniform (e.g. colors
    appear to change faster in yellow region than green regions)
-   insensitive to color vision deficiencies

### Viridis

-   `viridis` color scales are perceptually-uniform (even when printed
    in gray scale) and colorblindness-friendly
-   use `scale_*_viridis_*()`

```{r}
cat_color_plot +
  scale_color_viridis_d(option = "viridis", direction = -1)

cont_color_plot +
  scale_color_viridis_c(option = "magma")
```

### RColorBrewer

```{r}
# view all color palettes available from this package
RColorBrewer::display.brewer.all(colorblindFriendly = TRUE)

# view waht your palette could look like depending on number of colors and palette name
RColorBrewer::display.brewer.pal(n = 6, name = "Dark2")

# save hexcodes from palette to variable name
my_pal <- RColorBrewer::brewer.pal(n = 4, name = "Dark2")

# categorical ----
cat_color_plot +
  # takes first 3 colors of the palette for the three species
  scale_color_brewer(palette = "Dark2")

# sequential unclassed ----
cont_color_plot +
  scale_color_distiller(palette = "BuPu")

# binned palette ----
cont_color_plot +
  scale_color_fermenter(palette = "YlGnBu")
```

### Tip: outline points

good for when working with lighter colors that could blend in with
background

```{r}
ggplot(penguins, aes(x = bill_length_mm, 
                     y = bill_depth_mm,
                     fill = body_mass_g)) +
  geom_point(shape = 21, size = 4, alpha = 0.8) +
  scale_fill_distiller(palette = "BuPu")
```

### Use redundant mapping whenever possible

-   when possible, avoid conveying important information purely through
    color

## `{paletteer}`

-   use paletteer to explore available pre-made color palettes
-   generate list of HEX codes using `paletteer_*()` functions
-   apply palette directly using `scale_*_paletteer_*()` functions

```{r}
cat_color_plot +
  paletteer::scale_colour_paletteer_d("calecopal::superbloom3")

my_parks_palette <- NatParksPalettes::natparks.pals(
  name = "WindCave", n = 20, type = "continuous"
)

cont_color_plot +
  scale_color_gradientn(colors = my_parks_palette)
```

## Climate and environmental science visualiztion can (and should draw) from community standards when possible

## building your own color palettes

-   ensure you're picking colorblind-friendly combos
-   use color wheels to identify color harmonies
-   think carefully about what emotions / messages your color choices
    will convey
-   avoid lots of pure / fully-saturated hues

Also consider

-   your company or organization's brand / logo
-   steal colors from your favorite / relevant images using tools like
    Color Thief
-   use a randomized palette generator, like coolers.co

### color wheels

-   great to help identify color harmonies
    -   e.g. complementary, analogous, triadic, split complementary

### Hues

-   hues have associated meanings that differ among cultures
-   (e.g. blue = cold/sad)

## Common functions for scaling colors

For qualitative (categorical) data

-   scale\_\*\_manual()

For quantitative (numeric) data:

Unclassed palettes

scale\_*gradient(): creates a two color gradient (low-high)
scale*\_gradient2(): creates a diverging color gradient (low-mid-high)
scale\_\*\_gradientn(): creates a n-color gradient Classed palettes A
classed sequential color scale with 5 binned colors ranging from light
blue on the left to dark blue on the right. :

scale\_*steps(): creates a two color binned gradient (low-high)
scale\_*\_steps2(): creates a diverging binned color gradient
(low-mid-high) scale\_\*\_stepsn(): creates a n-color binned gradient
Use the fill variant of the above functions for areas, bars, etc. and
the color variant for points, lines, etc.

## Save palette

Save palette outside ggplot and name our colors

```{r}
my_palette <- c("#32DE8A", "#E36414", "#0F4C5C")

my_palette_named <- c("Adelie" = "#32DE8A","Chinstrap" = "#E36414", "Gentoo" = "#0F4C5C")

cat_color_plot + 
  scale_color_manual(values = my_palette_named)
```

scale\_\*\_identiy()

```{r}
penguins %>% 
  mutate(
    my_color = case_when(
      bill_length_mm < 40 ~ "#D7263D",
      between(bill_length_mm, 40, 50) ~ "#E4BB97",
      bill_length_mm > 50 ~ "#386150"
    )
  ) %>% 
  ggplot(aes(x = bill_length_mm, 
             y = bill_depth_mm, 
             color = my_color)) +
  geom_point(size = 4, alpha = 0.7) +
  scale_color_identity()

# highlight certain values
penguins |> 
  mutate(
    my_color = case_when(
      body_mass_g > 6000 ~ "#D7263D",
      TRUE ~ "gray50"
    )
  ) |> 
  ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = my_color)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_identity(guide = "legend", 
                       name = "Body mass (g)", labels = c(">6000", "<= 6000"))
```

## Choropleth

Maps that display the spatial distribution of a variable across divided
geographical areas / regions, where variable is encoded by color.

### Use `{tigris}` to download shapefiles


Prepping spatial data

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(tigris)

#.........................get shape data.........................
county_geo <- tigris::counties(class = "sf", cb = TRUE) |> # cb = TRUE to use cartographic boundary files
  
  # shift US to fit AK, HI, PR (we'll be filtering these out though) and transform CRS to USA Contiguous Albers Equal Area Conic (ESRI:102003) ----
  shift_geometry()

#....................import precipitation data...................
precip_data <- read_csv(here::here("week5", "data", "county-jan19-dec23-precip.csv"), skip = 4)

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                               data wrangling                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle geometries  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~

county_geo_wrangled <- county_geo |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county & state cols ----
  rename(county = namelsad, state = state_name) |>
  
  # remove states / territories that we don't have precip data for ----
  filter(!state %in% c("Alaska", "Hawaii", "District of Columbia",
                       "United States Virgin Islands", "Puerto Rico", "American Samoa",
                       "Commonwealth of the Northern Mariana Islands", "Guam")) |>
  
  # capitalize "city" (VA) ----
  mutate(county = str_replace(string = county, pattern = " city", replacement = " City"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ wrangle precipitation data  ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

precip_wrangled <- precip_data |>
  
  # clean up col names ----
  janitor::clean_names() |>
  
  # rename county col ----
  rename(county = name) |>
  
  # filter out DC ----
  filter(!county %in% c("Washington, D.C.")) |>
  
  # update name to match that in county_geo df ----
  mutate(county = str_replace(string = county, pattern = "Dona Ana County", replacement = "DoÃ±a Ana County")) |>
  
  # coerce precip & 20th centruy avg from chr to numeric ----
  mutate(value = as.numeric(value),
         x1901_2000_mean = as.numeric(x1901_2000_mean)) |>
  
  # calculate % change ----
  mutate(perc_change = ((value - x1901_2000_mean)/x1901_2000_mean)*100) |>
  
  # select, rename, reorder cols ----
  select(id, state, county, mean_1901_2000 = x1901_2000_mean, precip = value, perc_change, anomaly_1901_2000_base_period)

##~~~~~~~~~~~~~~~~~~
##  ~ join dfs  ----
##~~~~~~~~~~~~~~~~~~

# join dfs (be sure to join precip TO sf object, not the other way around) -------
joined_precip_geom <- full_join(county_geo_wrangled, precip_wrangled) 
```

Base map
```{r}
base_map <- ggplot(joined_precip_geom) +
  geom_sf(aes(fill = perc_change), linewidth = 0.1) +
  labs(title = "5-year precip compared with the 20th century average",
       subtitle = "January 2019 - December 2023",
       caption = "Source: National Centers for Environmental Information") +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    plot.caption = element_text(face = "italic",
                                margin = margin(t = 2, r = 0.5,
                                                b = 0, l = 0, "lines"))
  )

base_map
```

