---
title: "Lecture 6 notes"
data: "2024-02-12"
---

## Typography

-   **Typeface**: aka font family; underlying visual design
    -   e.g. Times New Roman, Helvetica, Roboto
-   **Font**: implementation of a typeface; they can come in different weights and styles
    -   e.g. bold, italic

*To consider...*

-   when in doubt, use sans-serif fonts
    -   no feets so cleaner and easier to read
    -   Roboto, Lato, Open Sans
    -   serif fonts = classy/traditional/progessional/serious tone; typically used only for visualization headlines
-   use a typeface with lining figures for numerals
    -   want numbers to "line up" for easier reading
-   Use monospaced typeface for numerals
    -   same amount of space allotted for all numbers so all numbers line up on top of each other
-   Use a typeface with all the symbols you need
-   Use bold fonts for emphasis only
    -   title or emphasize specific words in annotations
-   Avoid really thing fonts
-   Ensure font size is large enough
-   Use high-contrast color for most text
    -   minimum contrast ratio of 4.5:1
    -   [color contrast checker](https://userway.org/contrast/?fg=000000&bg=ffffff)
- remember typographic hierarchy and create your own to guide reader's eyes
- avoid ALL CAPS
- stick to 1-3 typefaces


## Problem with system fonts

- **system font**: one that’s already assumed to be on the vast majority of users’ devices, with no need for a web font to be downloaded.
  - sans, serif, and mono are the only three guaranteed to be on all devices
  - sans = default for ggplot

```{r}
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point() + 
  labs(title = "This title is serif font",
       subtitle = "This subtitle is mono font",
       x = "This axis label is sans font (default)",
       y = "This axis is also sans font (default)") +
  theme(
    plot.title = element_text(family = "serif", size = 30),
    plot.subtitle = element_text(family = "mono", size = 25),
    axis.title = element_text(family = "sans", size = 22),
    axis.text.x = element_text(family = "serif", face = "bold", size = 18),
    axis.text.y = element_text(family = "mono", face = "italic", size = 18)
    )
```

**A graphics device (GD)** is something used to make a plot appear. Two main device types:

1. screen devices: most common place for plot to be "sent"
2. file devices: if want to write plot to a file

Unfortunately, text drawing is handled differently by each graphics device, which means that if we want a font to work everywhere, we need to configure all these different devices in different ways.

## R packages for the solution `{showtext}`

it supports more file formats and more graphics devices, and it also avoids using external software 

### update a previous plot

Occupation plot data wrangling
```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................load packages.........................
library(tidyverse)
library(showtext)

#..........................import fonts..........................
# `name` is the name of the font as it appears in Google Fonts
# `family` is the user-specified id that you'll use to apply a font in your ggpplot
font_add_google(name = "Josefin Sans", family = "josefin")
font_add_google(name = "Sen", family = "sen")

#................enable {showtext} for rendering.................
showtext_auto()

#..........................import data...........................
jobs <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-05/jobs_gender.csv")

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                wrangle data                              ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

jobs_clean <- jobs |>

  # add cols (needed for dumbbell plot) ----
  mutate(percent_male = 100 - percent_female, # % of females within each industry was already included
       difference_earnings = total_earnings_male - total_earnings_female) |>  # diff in earnings between M & F

  # rearrange columns ----
  relocate(year, major_category, minor_category, occupation,
           total_workers, workers_male, workers_female,
           percent_male, percent_female,
           total_earnings, total_earnings_male, total_earnings_female, difference_earnings,
           wage_percent_of_male) |>

  # drop rows with missing earning data ----
  drop_na(total_earnings_male, total_earnings_female) |>

  # make occupation a factor ----
  mutate(occupation = as.factor(occupation)) |>

# ---- this next step is for creating our dumbbell plots ----

# classify jobs by percentage male or female ----
  mutate(group_label = case_when(
    percent_female >= 75 ~ "Occupations that are 75%+ female",
    percent_female >= 45 & percent_female <= 55 ~ "Occupations that are 45-55% female",
    percent_male >= 75 ~ "Occupations that are 75%+ male"
  ))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                              create subset df                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#....guarantee the same random samples each time we run code.....
set.seed(0)

#.........get 10 random jobs that are 75%+ female (2016).........
f75 <- jobs_clean |>
  filter(year == 2016, group_label == "Occupations that are 75%+ female") |>
  slice_sample(n = 10)

#..........get 10 random jobs that are 75%+ male (2016)..........
m75 <- jobs_clean |>
  filter(year == 2016, group_label == "Occupations that are 75%+ male") |>
  slice_sample(n = 10)

#........get 10 random jobs that are 45-55%+ female (2016).......
f50 <- jobs_clean |>
  filter(year == 2016, group_label == "Occupations that are 45-55% female") |>
  slice_sample(n = 10)

#.......combine dfs & relevel factors (for plotting order).......
subset_jobs <- rbind(f75, m75, f50) |>
  mutate(group_label = fct_relevel(group_label, 
                                   "Occupations that are 75%+ female",
                                   "Occupations that are 45-55% female", 
                                   "Occupations that are 75%+ male"))
```
Create color palette
```{r}
earnings_pal <- c("males" = "#2D7787",
                  "females" = "#FC6B4B",
                  dark_text = "#0C1509",
                  light_text = "#4E514D") 
monochromeR::view_palette(earnings_pal)
```


build occupation plot
```{r}
plot <- ggplot(subset_jobs) +
  geom_segment(aes(x = total_earnings_female, xend = total_earnings_male,
                 y = fct_reorder(occupation, total_earnings), yend = occupation)) +
  geom_point(aes(x = total_earnings_male, y = occupation),
             color = earnings_pal["males"], size = 3.25) +
  geom_point(aes(x = total_earnings_female, y = occupation),
             color = earnings_pal["females"], size = 3.25) +
  facet_wrap(~group_label, nrow = 3, scales = "free_y") +
  scale_x_continuous(labels = scales::label_dollar(scale = 0.001, suffix = "k"),
                     breaks = c(25000, 50000, 75000, 100000, 125000))

plot
```

Adjusting theme
```{r}
plot +
  labs(title = "Males earn more than females across most occupations", # main takeaway
       subtitle = "Median earnings of full-time <span style='color:#2D7787;font-size:20pt;'>**male**</span> vs. <span style='color:#FC6B4B;font-sixe:20pt;'>**female**</span> workers by occupation in 2016", # more info about the data
       caption = "Data Source: TidyTuesday (March 5, 2019") +
  theme_minimal() +
  theme(
    # shift title/subtitle over to edge of whole plot instead of edge of panel
    plot.title.position = "plot",
    plot.title = element_text(family = "josefin",
                              face = "bold",
                              size = 25,
                              color = earnings_pal["dark_text"]),
    plot.subtitle = ggtext::element_textbox_simple(family = "sen",
                                 size = 17,
                                 color = earnings_pal["light_text"],
                                 # TRBL (top, right, left, bottom)
                                 margin = margin(0.5, 0, 1, 0, unit = "lines")),
    plot.caption = element_text(family = "sen",
                                # no italicized styles of sen
                                # face = "italic",
                                color = earnings_pal["light_text"],
                                margin = margin(3, 0, 0, 0, unit = "lines")),
    strip.text = element_text(family = "josefin",
                              face = "bold",
                              size = 12,
                              hjust = 0),
    panel.spacing.y = unit(x = 1, "lines"),
    axis.text = element_text(family = "sen",
                             color = earnings_pal["light_text"]),
    axis.text.x = element_text(size = 10),
    axis.title = element_blank()
  )
```
 
## Annotations

Why annotate?

- clarify meaning / significance of data (especially particular data points or groups)
- facilitate interpretation
- build a narrative

*Aim to**:

- tell your readers what you want them to see
- guide your readers eyes & attention
- remind your readers what they’re looking at

Metabolism plot
```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                    setup                                 ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#.........................load libraries.........................
library(tidyverse)

#..........................read in data..........................

# read in Google Sheet ----
lobs <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1DkDVcl_9rlaqznHfa_v1V1jtZqcuL75Q6wvAHpnCHuk/edit#gid=2143433533") |>
  mutate(temp = as.factor(temp))

# alternatively, read in csv file ----
#lobs <- read_csv(here::here("week6", "data", "metabolism-foraging-data.csv")) |>
  mutate(temp = as.factor(temp))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                            create lobster plot                           ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#..........................create theme..........................
lob_theme <- function(){
  theme_light() +
    theme(
      axis.title.x = ggtext::element_markdown(size = 13,
                                              margin = margin(t = 1, r = 0, b = 0, l = 0, unit = "lines")),
      axis.title.y = ggtext::element_markdown(size = 13,
                                              margin = margin(t = 0, r = 1, b = 0, l = 0, unit = "lines")),
      axis.text = element_text(color = "black", size = 12),
      panel.border = element_rect(colour = "black", size = 0.7),
      panel.grid = element_blank(),
      legend.title = element_text(size = 11),
      legend.text = element_text(size = 10),
      legend.position = c(0.95, 0.95),
      legend.justification = c(0.95, 0.95),
      legend.box.background = element_rect(color = "black", size = 1.1)

    )
}

#..........................create scales.........................
lob_palette <- c("11" = "#7B8698",
                 "16" = "#BAD7E5",
                 "21" = "#DC7E7C",
                 "26" = "#7D3E40")

lob_shapes <-  c("11" = 15,
                 "16" = 16,
                 "21" = 17,
                 "26" = 18)

lob_sizes <- c("11" = 6,
               "16" = 6,
               "21" = 6,
               "26" = 7)

#........................create plot text........................
x_axis_lab <- glue::glue("Resting Metabolic Rate<br>
                         (mg O<sub>2</sub> kg<sup>-1</sup> min<sup>-1</sup>)")

y_axis_lab <- glue::glue("Maximum Consumption Rate<br>
                         (prey consumed predator<sup>-1</sup> 24hr<sup>-1</sup>)")

#............................plot data...........................
lob_plot <- ggplot(lobs, aes(x = SMR, y = avg_eaten,
                 color = temp, shape = temp, size = temp)) +
  geom_point() +
  scale_color_manual(values = lob_palette, name = "Temperature (ºC)") +
  scale_shape_manual(values = lob_shapes, name = "Temperature (ºC)") +
  scale_size_manual(values = lob_sizes, name = "Temperature (ºC)") +
  scale_x_continuous(breaks = seq(0, 1.5, by = 0.2)) +
  scale_y_continuous(breaks = seq(0, 35, by = 5)) +
  labs(x = x_axis_lab,
       y = y_axis_lab) +
  lob_theme()

lob_plot
```

### Building custom annotations (2 approaches)

1. `geom_text()` (plain text) & `geom_label()` (adds rectangle behind text), which take aesthetics mappings; these draw the geom *once per each row of the data frame*
2. `annotate()` which does not take aesthetics mappings and instead draws only the info provided to it

**Our goal**: add a rectangle that bounds / highlights a subset of points, add text nearby that reads Important lobsters, and draw an arrow from the text pointing to the box.

`geom_text()`
```{r}
lob_plot +
  geom_text(
    # coord for text to live
    x = 0.1, y = 25,
    label = "Important Lobsters",
    size = 4,
    color = "black",
    # so it doesn't run off plot space
    hjust = "inward"
  ) +
  geom_rect(
    # bounding box coords
    xmin = 0.25, xmax = 0.85,
    ymin = 8.5, ymax = 18,
    alpha = 0.5,
    fill = "gray40", color = "black",
    show.legend = FALSE
  )
```

`annotate()`
```{r}
lob_plot +
  annotate(
    geom = "text",
    # coord for text to live
    x = 0.1, y = 25,
    label = "Important Lobsters",
    size = 4,
    color = "black",
    # so it doesn't run off plot space
    hjust = "inward"
  ) +
  annotate(
    geom = "rect",
    # bounding box coords
    xmin = 0.25, xmax = 0.85,
    ymin = 8.5, ymax = 18,
    alpha = 0.5,
    fill = "gray40", color = "black"
  ) +
  # add arrow!
  annotate(
    geom = "curve",
    x = 0.3, xend = 0.5,
    y = 23.8, yend = 19,
    curvature = -0.15,
    arrow = arrow(length = unit(0.3, "cm"))
  )
```

